wb = xlsx_package.workbook
s = wb.styles
header = s.add_style sz: 14, b: true, bg_color: "6EAA46", fg_color: "FFFFFF", alignment: { wrap_text: true, vertical: :center }
image = File.expand_path('public/logos/dcs-logo.png')
wb.add_worksheet(name: "Post") do |sheet|
  sheet.add_image(image_src: image, start_at: 'A1', width: 300, height: 100)
  sheet.merge_cells('A1:J1')
  sheet.add_row [], height: 100
  sheet.add_row ["Platform", "Group Name", "State", "First Name","Middle Name", "Last Name", "Practitioner Type", "NPI", "Tax ID", "Missing Information"], style: header, height: 70
  @providers.each do |provider|
    state_id = provider&.state_id
    state_id = state_id.to_i
    state_name = State.find_by(id: state_id)&.name
    board_certifications = provider.board_certifications
    dea_licenses = provider.dea_licenses
    cds_licenses = provider.cds_licenses
    rn_licenses = provider.rn_licenses
    cnp_licenses = provider.cnp_licenses
    licenses = provider.licenses
    missing_information = []

    # Check each attribute for missing values and add to the missing_information array
    missing_information << "Status" if provider.status.blank?
    missing_information << "Gender" if provider.gender.blank?
    missing_information << "SSN" if provider.ssn.blank?
    missing_information << "Date of Birth" if provider.birth_date.blank?
    missing_information << "Birth City" if provider.birth_city.blank?
    missing_information << "Birth State" if provider.birth_state.blank?
    missing_information << "Address 1" if provider.address_line_1.blank?
    missing_information << "Address 2" if provider.address_line_2.blank?
    missing_information << "city" if provider.city.blank?
    missing_information << "State" if provider.state&.name.blank?
    missing_information << "Zip code" if provider.zip_code.blank?
    missing_information << "Phone Number" if provider.formatted_phone.blank?
    missing_information << "Email" if provider.email_address.blank?
    missing_information << "Notification of New Provider" if provider.new_provider_notification.blank?
    missing_information << "Start Date" if provider.notification_start_date.blank?
    missing_information << "Notification to begin submitting Enrollment" if provider.notification_enrollment_submit.blank?
    missing_information << "Services" if provider.notification_services.blank?
    missing_information << "status" if provider.status.blank?
    missing_information << "Work End Date" if provider.end_date.blank?
    missing_information << "Subject" if provider.welcome_letter_subject.blank?
    missing_information << "Upload files from computer" if provider.welcome_letter_attachments.blank?
    missing_information << "First Name" if provider.first_name.blank?
    missing_information << "Middle Name" if provider.middle_name.blank?
    missing_information << "Last Name " if provider.last_name.blank?
    missing_information << "Suffix" if provider.suffix.blank?
    missing_information << "Telephone Number" if provider.telephone_number.blank?
    missing_information << "Ext" if provider.ext.blank?
    missing_information << "Name of U.S./Canadian School" if provider.medical_school_name.blank?
    missing_information << "Start Date" if provider.prof_medical_start_date.blank?
    missing_information << "Degree Awarded" if provider.prof_medical_school_degree_awarded.blank?
    missing_information << "End(Graduation) Date" if provider.graduation_date.blank?
    missing_information << "Did you complete your graduate education at this school?" if provider.medical_license.blank?
    missing_information << "Practitioner Type (can be multiple)" if provider.practitioner_type.blank?
    missing_information << "Taxonomy" if provider.taxonomy.blank?
    missing_information << "Specialty (i.e., Specialties is selected based on taxonomy codes) (can be multiple)" if provider.specialty.blank?
    missing_information << "Provider Effective Date" if provider.provider_effective_date.blank?
    missing_information << "NPI Number" if provider.npi.blank?
    missing_information << "CAQH ID" if provider.caqhid.blank?
    missing_information << "CAQH State" if provider.caqh_state.blank?
    missing_information << "CAQH Username" if provider.caqh_username.blank?
    missing_information << "CAQH Password" if provider.caqh_password.blank?
    missing_information << "Current Re-Attestation" if provider.caqh_current_reattestation_date.blank?
    missing_information << "Re-Attestation must be completed by" if provider.caqh_reattest_completed_by.blank?
    missing_information << "Questions" if provider.caqh_question.blank?
    missing_information << "Answer" if provider.caqh_answer.blank?
    missing_information << "CAQH PDF Date Received" if provider.caqh_pdf_date_received.blank?
    missing_information << "CAQH Notes" if provider.caqh_notes.blank?
    missing_information << "Carrier or Self-Insured Name" if provider.prof_liability_carrier_name.blank?
    missing_information << "Self-Insured?" if provider.prof_liability_self_insured.blank?
    missing_information << "Professional Liability Address" if provider.prof_liability_address.blank?
    missing_information << "Professional Liability City" if provider.prof_liability_city.blank?
    missing_information << "Professional Liability State" if provider.prof_liability_state_id.blank?
    missing_information << "Professional Liability Zip Code (+4 Zip Code)" if provider.prof_liability_zipcode.blank?
    missing_information << "Original Effective Date" if provider.prof_liability_orig_effective_date.blank?
    missing_information << "Professional Liability Effective Date" if provider.prof_liability_effective_date.blank?
    missing_information << "Professional Liability Expiration Date" if provider.prof_liability_expiration_date.blank?
    missing_information << "Type of Coverage" if provider.prof_liability_coverage_type.blank?
    missing_information << "Do you have unlimited coverage with this insurance carrier?" if provider.prof_liability_unlimited_coverage.blank?
    missing_information << "Policy includes tail coverage?" if provider.prof_liability_tail_coverage.blank?
    missing_information << "Amount of coverage per occurence (must be at least $1,000,000/$3,000,000)" if provider.prof_liability_coverage_amount.blank?
    missing_information << "Amount of coverage aggregate (must be at least $1,000,000/$3,000,000)" if provider.prof_liability_coverage_amount_aggregate.blank?
    missing_information << "Policy Number" if provider.prof_liability_policy_number.blank?
    missing_information << "Group" if provider.enrollment_group_id.blank?
    missing_information << "Primary Location" if provider.primary_location.blank?
    missing_information << "Additional Locations" if provider.dcos.blank?
    missing_information << "Hire date of provider seeing patients" if provider.provider_hire_date_seeing_patient.blank?
    missing_information << "Effective date of provider seeing patients" if provider.effective_date_seeing_patient.blank?
    missing_information << "Does provider require a collab/supervising provider?" if provider.supervised_by_psychologist.blank?
    missing_information << "Providers Name" if provider.supervising_name.blank?
    missing_information << "Providers NPI" if provider.supervising_npi.blank?
    missing_information << "Telehealth License Number" if provider.telehealth_license_number.blank?
    missing_information << "Licensed Registered State" if provider.licensed_registered_state_id.blank?
    missing_information << "State License Copies" if provider.state_license_copies.blank?
    missing_information << "Dea Copies" if provider.dea_copies.blank?
    missing_information << "W9 Form Copies download template here" if provider.w9_form_copies.blank?
    missing_information << "Certificate Insurance Copies" if provider.certificate_insurance_copies.blank?
    missing_information << "Driver License Copies" if provider.driver_license_copies.blank?
    missing_information << "Board Certification Copies" if provider.board_certification_copies.blank?
    missing_information << "Caqh App Copies" if provider.caqh_app_copies.blank?
    missing_information << "Curriculum Vitae (CV) Copies" if provider.cv_copies.blank?
    missing_information << "Telehealth License Copies" if provider.telehealth_license_copies.blank?
    missing_information << "Board Certificate" if provider.school_certificate.blank?
    formatted_board_names = format_number_for_leading_zeroes(board_certifications.pluck(:bc_board_name).reject(&:blank?))
    missing_information << "Board Names" unless formatted_board_names.present?
    certification_number = format_number_for_leading_zeroes(board_certifications.pluck(:bc_certification_number).reject(&:blank?))
    missing_information << "Board Certification Number" unless certification_number.present?
    effective_date = format_number_for_leading_zeroes(board_certifications.pluck(:bc_effective_date).reject(&:blank?))
    missing_information << "Board Effective Date" unless effective_date.present?
    bc_recertification_date = format_number_for_leading_zeroes(board_certifications.pluck(:bc_recertification_date).reject(&:blank?))
    missing_information << "Board Re-certification Date" unless bc_recertification_date.present?
    bc_expiration_date = format_number_for_leading_zeroes(board_certifications.pluck(:bc_expiration_date).reject(&:blank?))
    missing_information << "Board Expiration Date" unless bc_expiration_date.present?
    bc_specialty_type = format_number_for_leading_zeroes(board_certifications.pluck(:bc_specialty_type).reject(&:blank?))
    missing_information << "Board Specialty Type" unless bc_specialty_type.present?
    dea_license_number = format_number_for_leading_zeroes(dea_licenses.pluck(:dea_license_number).reject(&:blank?))
    missing_information << "DEA Registration Number" unless dea_license_number.present?
    dea_license_effective_date = format_number_for_leading_zeroes(dea_licenses.pluck(:dea_license_effective_date).reject(&:blank?))
    missing_information << "DEA Registration Original License Issue Date" unless dea_license_effective_date.present?
    state_id = format_number_for_leading_zeroes(dea_licenses.pluck(:state_id).reject(&:blank?))
    missing_information << "DEA Registration State" unless state_id.present?
    dea_license_expiration_date = format_number_for_leading_zeroes(dea_licenses.pluck(:dea_license_expiration_date).reject(&:blank?))
    missing_information << "DEA Registration Expiration Date" unless dea_license_expiration_date.present?
    dea_license_renewal_effective_date = format_number_for_leading_zeroes(dea_licenses.pluck(:dea_license_renewal_effective_date).reject(&:blank?))
    missing_information << "DEA Registration Renewal(Current Effective) Date" unless dea_license_renewal_effective_date.present?
    cds_license_number = format_number_for_leading_zeroes(cds_licenses.pluck(:cds_license_number).reject(&:blank?))
    missing_information << "CDS Registration Number" unless cds_license_number.present?
    cds_license_issue_date = format_number_for_leading_zeroes(cds_licenses.pluck(:cds_license_issue_date).reject(&:blank?))
    missing_information << "CDS Registration Original License Issue Date" unless cds_license_issue_date.present?
    state_id_cds = format_number_for_leading_zeroes(cds_licenses.pluck(:state_id).reject(&:blank?))
    missing_information << "CDS Registration State" unless state_id_cds.present?
    cds_license_expiration_date = format_number_for_leading_zeroes(cds_licenses.pluck(:cds_license_expiration_date).reject(&:blank?))
    missing_information << "CDS Registration Expiration Date" unless cds_license_expiration_date.present?
    cds_renewal_effective_date = format_number_for_leading_zeroes(cds_licenses.pluck(:cds_renewal_effective_date).reject(&:blank?))
    missing_information << "CDS Registration Renewal(Current Effective) Date" unless cds_renewal_effective_date.present?
    rn_license_number = format_number_for_leading_zeroes(rn_licenses.pluck(:rn_license_number).reject(&:blank?))
    missing_information << "RN License Number" unless rn_license_number.present?
    rn_license_effective_date = format_number_for_leading_zeroes(rn_licenses.pluck(:rn_license_effective_date).reject(&:blank?))
    missing_information << "RN Original License Issue Date" unless rn_license_effective_date.present?
    state_id_rn = format_number_for_leading_zeroes(rn_licenses.pluck(:state_id).reject(&:blank?))
    missing_information << "RN Registration State" unless state_id_rn.present?
    rn_license_renewal_effective_date = format_number_for_leading_zeroes(rn_licenses.pluck(:rn_license_renewal_effective_date).reject(&:blank?))
    missing_information << "RN License Renewal(Current Effective) Date" unless rn_license_renewal_effective_date.present?
    rn_license_expiration_date = format_number_for_leading_zeroes(rn_licenses.pluck(:rn_license_expiration_date).reject(&:blank?))
    missing_information << "RN License Expiration Date" unless rn_license_expiration_date.present?
    cnp_license_number = format_number_for_leading_zeroes(cnp_licenses.pluck(:cnp_license_number).reject(&:blank?))
    missing_information << "APRN License Number" unless cnp_license_number.present?
    effective_date_ar = format_number_for_leading_zeroes(cnp_licenses.pluck(:effective_date).reject(&:blank?))
    missing_information << "APRN Original License Issue Date" unless effective_date_ar.present?
    state_id_ar = format_number_for_leading_zeroes(cnp_licenses.pluck(:state_id).reject(&:blank?))
    missing_information << "APRN Registration State" unless state_id_ar.present?
    cnp_license_renewal_effective_date = format_number_for_leading_zeroes(cnp_licenses.pluck(:cnp_license_renewal_effective_date).reject(&:blank?))
    missing_information << "APRN License Renewal(Current Effective) Date" unless cnp_license_renewal_effective_date.present?
    expiration_date_ar = format_number_for_leading_zeroes(cnp_licenses.pluck(:expiration_date).reject(&:blank?))
    missing_information << "APRN License Expiration Date" unless expiration_date_ar.present?
    license_number_st = format_number_for_leading_zeroes(licenses.pluck(:license_number).reject(&:blank?))
    missing_information << "State License Number" unless license_number_st.present?
    license_effective_date_st = format_number_for_leading_zeroes(licenses.pluck(:license_effective_date).reject(&:blank?))
    missing_information << "Original License Issue Date" unless license_effective_date_st.present?
    state_id_st = format_number_for_leading_zeroes(licenses.pluck(:state_id).reject(&:blank?))
    missing_information << "State Registered" unless state_id_st.present?
    license_expiration_date_st = format_number_for_leading_zeroes(licenses.pluck(:license_expiration_date).reject(&:blank?))
    missing_information << "State License Expiration Date" unless license_expiration_date_st.present?
    license_state_renewal_date_st = format_number_for_leading_zeroes(licenses.pluck(:license_state_renewal_date).reject(&:blank?))
    missing_information << "State License Renewal(Current Effective) Date" unless license_state_renewal_date_st.present?
    license_type_st = format_number_for_leading_zeroes(licenses.pluck(:license_type).reject(&:blank?))
    missing_information << "License Type" unless license_type_st.present?
    missing_information << "Message" if provider.welcome_letter_message.blank?
    missing_information << "Send Welcome Letter to Provider" if provider.welcome_letter_status.blank?
    GroupDco.where(created_at: @month.beginning_of_month..@month.end_of_month).each do |dco|
      missing_information << "city(group)" if dco&.dco_city.blank?
      missing_information << "State(group)" if dco&.state.blank?
      missing_information << "Zip Code(group)" if dco&.dco_zipcode.blank?
      missing_information << "Phone Number (group)" if dco&.service_location_phone_number.blank?
      missing_information << "Fax Number(group)" if dco&.service_location_fax_number.blank?
      missing_information << "Panel Status to New Patients(group)" if dco&.panel_status_to_new_patients.blank?
      missing_information << "Panel Age Limits(group)" if dco&.panel_age_limit.blank?
      missing_information << "Include in Directory?(group)" if dco&.include_in_directory.blank?
    end
    sheet.add_row [
      flatforms.detect{|flatform| flatform.last == provider.group&.flatform }&.first,
      provider.group&.group_name,
      state_name,
      provider.first_name,
      provider.middle_name,
      provider.last_name,
      provider.practitioner_type,
      provider.npi,
      provider.group&.tin_digit,
      missing_information.join(', ')
    ], types: [:string, :string, :string, :string, :string, :string, :string, :string, :string, :string]
  end
  sheet.column_widths 12, 18, 12, 24, 24, 24, 18, 18, 12, 30
end