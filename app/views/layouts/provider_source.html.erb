<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Required Meta Tags Always Come First -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>

  <%= stylesheet_link_tag "application" %>
  <%= javascript_importmap_tags %>
  <!-- Title -->
  <title>PLM HEALTH ONE APP</title>

  <!-- Favicon -->
  <link rel="shortcut icon" href="./favicon.ico">

  <!-- Font -->
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">

  <!-- CSS Implementing Plugins -->
  <link rel="stylesheet" href="./dist/assets/vendor/bootstrap-icons/font/bootstrap-icons.css">

  <link rel="stylesheet" href="./dist/assets/vendor/daterangepicker/daterangepicker.css">
  <link rel="stylesheet" href="./dist/assets/vendor/tom-select/dist/css/tom-select.bootstrap5.css">

  <script src="https://code.jquery.com/jquery-3.6.4.js" integrity="sha256-a9jBBRygX1Bh5lt8GZjXDzyOB+bWve9EiO7tROUtj/E=" crossorigin="anonymous"></script>
  <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/signature_pad/1.3.4/signature_pad.min.js" integrity="sha512-Mtr2f9aMp/TVEdDWcRlcREy9NfgsvXvApdxrm3/gK8lAMWnXrFsYaoW01B5eJhrUpBT7hmIjLeaQe0hnL7Oh1w==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

  <link rel="preload" href="./dist/assets/css/theme.min.css" data-hs-appearance="default" as="style">
  <link rel="preload" href="./dist/assets/css/theme-dark.min.css" data-hs-appearance="dark" as="style">
  <link rel="stylesheet" href="./dist/virtualcss/virtual-select.min.css" />
  <script src="./dist/virtualcss/virtual-select.min.js"></script>

  <style data-hs-appearance-onload-styles>
    *
    {
      transition: unset !important;
    }

    body
    {
      opacity: 0;
    }
  </style>

  <%= yield :css %>

<script>

            window.hs_config = {"autopath":"@@autopath","deleteLine":"hs-builder:delete","deleteLine:build":"hs-builder:build-delete","deleteLine:dist":"hs-builder:dist-delete","previewMode":false,"startPath":"/index.html","vars":{"themeFont":"https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap","version":"?v=1.0"},"layoutBuilder":{"extend":{"switcherSupport":true},"header":{"layoutMode":"default","containerMode":"container-fluid"},"sidebarLayout":"default"},"themeAppearance":{"layoutSkin":"default","sidebarSkin":"default","styles":{"colors":{"primary":"#377dff","transparent":"transparent","white":"#fff","dark":"132144","gray":{"100":"#f9fafc","900":"#1e2022"}},"font":"Inter"}},"languageDirection":{"lang":"en"},"skipFilesFromBundle":{"dist":["assets/js/hs.theme-appearance.js","assets/js/hs.theme-appearance-charts.js","assets/js/demo.js"],"build":["assets/css/theme.css","assets/vendor/hs-navbar-vertical-aside/dist/hs-navbar-vertical-aside-mini-cache.js","assets/js/demo.js","assets/css/theme-dark.css","assets/css/docs.css","assets/vendor/icon-set/style.css","assets/js/hs.theme-appearance.js","assets/js/hs.theme-appearance-charts.js","node_modules/chartjs-plugin-datalabels/dist/chartjs-plugin-datalabels.min.js","assets/js/demo.js"]},"minifyCSSFiles":["assets/css/theme.css","assets/css/theme-dark.css"],"copyDependencies":{"dist":{"*assets/js/theme-custom.js":""},"build":{"*assets/js/theme-custom.js":"","node_modules/bootstrap-icons/font/*fonts/**":"assets/css"}},"buildFolder":"","replacePathsToCDN":{},"directoryNames":{"src":"./src","dist":"./dist","build":"./build"},"fileNames":{"dist":{"js":"theme.min.js","css":"theme.min.css"},"build":{"css":"theme.min.css","js":"theme.min.js","vendorCSS":"vendor.min.css","vendorJS":"vendor.min.js"}},"fileTypes":"jpg|png|svg|mp4|webm|ogv|json"}
            window.hs_config.gulpRGBA = (p1) => {
  const options = p1.split(',')
  const hex = options[0].toString()
  const transparent = options[1].toString()

  var c;
  if(/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)){
    c= hex.substring(1).split('');
    if(c.length== 3){
      c= [c[0], c[0], c[1], c[1], c[2], c[2]];
    }
    c= '0x'+c.join('');
    return 'rgba('+[(c>>16)&255, (c>>8)&255, c&255].join(',')+',' + transparent + ')';
  }
  throw new Error('Bad Hex');
}
            window.hs_config.gulpDarken = (p1) => {
  const options = p1.split(',')

  let col = options[0].toString()
  let amt = -parseInt(options[1])
  var usePound = false

  if (col[0] == "#") {
    col = col.slice(1)
    usePound = true
  }
  var num = parseInt(col, 16)
  var r = (num >> 16) + amt
  if (r > 255) {
    r = 255
  } else if (r < 0) {
    r = 0
  }
  var b = ((num >> 8) & 0x00FF) + amt
  if (b > 255) {
    b = 255
  } else if (b < 0) {
    b = 0
  }
  var g = (num & 0x0000FF) + amt
  if (g > 255) {
    g = 255
  } else if (g < 0) {
    g = 0
  }
  return (usePound ? "#" : "") + (g | (b << 8) | (r << 16)).toString(16)
}
            window.hs_config.gulpLighten = (p1) => {
  const options = p1.split(',')

  let col = options[0].toString()
  let amt = parseInt(options[1])
  var usePound = false

  if (col[0] == "#") {
    col = col.slice(1)
    usePound = true
  }
  var num = parseInt(col, 16)
  var r = (num >> 16) + amt
  if (r > 255) {
    r = 255
  } else if (r < 0) {
    r = 0
  }
  var b = ((num >> 8) & 0x00FF) + amt
  if (b > 255) {
    b = 255
  } else if (b < 0) {
    b = 0
  }
  var g = (num & 0x0000FF) + amt
  if (g > 255) {
    g = 255
  } else if (g < 0) {
    g = 0
  }
  return (usePound ? "#" : "") + (g | (b << 8) | (r << 16)).toString(16)
}
            </script>
</head>

<body class="has-navbar-vertical-aside navbar-vertical-aside-show-xl footer-offset">

  <script src="./dist/assets/js/hs.theme-appearance.js"></script>

  <script src="./dist/assets/vendor/hs-navbar-vertical-aside/dist/hs-navbar-vertical-aside-mini-cache.js"></script>


  <%= render "global_components/header"%>

  <%= render "global_components/sidebar"%>



  <main id="content" role="main" class="main">
    <% if notice or alert%>
    <div class="px-3 mt-3">
      <% if notice %>
        <p class="alert alert-success"><%= notice %></p>
      <% end %>

      <% if alert %>
        <p class="alert alert-danger"><%= alert %></p>
      <% end %>
    </div>
    <% end %>
    <%= yield %>
    <%#= render "global_components/footer"%> <!-- not needed for now no footer in design -->
  </main>


  <div class="loading-overlay">
    <div class="loading-spinner"></div>
  </div>

  <script>
    // show loader when search button is clicked
		$('input[type="submit"]').click(function() {
			$('.loading-overlay').show();
		});
  </script>


  <%= render 'external/tawkto' %>


  <!-- JS Global Compulsory  -->
  <script src="./dist/assets/vendor/jquery/dist/jquery.min.js"></script>
  <script src="./dist/assets/vendor/jquery-migrate/dist/jquery-migrate.min.js"></script>
  <script src="./dist/assets/vendor/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

  <!-- JS Implementing Plugins -->
  <script src="./dist/assets/vendor/hs-navbar-vertical-aside/dist/hs-navbar-vertical-aside.min.js"></script>
  <script src="./dist/assets/vendor/hs-form-search/dist/hs-form-search.min.js"></script>

  <script src="./dist/assets/vendor/chart.js/dist/Chart.min.js"></script>
  <script src="./dist/assets/vendor/chartjs-chart-matrix/dist/chartjs-chart-matrix.min.js"></script>
  <script src="./dist/assets/vendor/chartjs-plugin-datalabels/dist/chartjs-plugin-datalabels.min.js"></script>
  <script src="./dist/assets/vendor/daterangepicker/moment.min.js"></script>
  <script src="./dist/assets/vendor/daterangepicker/daterangepicker.js"></script>
  <script src="./dist/assets/vendor/tom-select/dist/js/tom-select.complete.min.js"></script>
  <script src="./dist/assets/vendor/clipboard/dist/clipboard.min.js"></script>
  <script src="./dist/assets/vendor/datatables/media/js/jquery.dataTables.min.js"></script>
  <script src="./dist/assets/vendor/datatables.net.extensions/select/select.min.js"></script>

  <!-- JS  -->
  <script src="./dist/assets/js/theme.min.js"></script>
  <script src="./dist/assets/js/hs.theme-appearance-charts.js"></script>

  <!-- JS Plugins Init. -->
  <script>
    $(document).on('ready', function () {
      // INITIALIZATION OF DATERANGEPICKER
      // =======================================================
      $('.js-daterangepicker').daterangepicker();

      $('.js-daterangepicker-times').daterangepicker({
        timePicker: true,
        startDate: moment().startOf('hour'),
        endDate: moment().startOf('hour').add(32, 'hour'),
        locale: {
          format: 'M/DD hh:mm A'
        }
      });

      var start = moment();
      var end = moment();

      function cb(start, end) {
        $('#js-daterangepicker-predefined .js-daterangepicker-predefined-preview').html(start.format('MMM D') + ' - ' + end.format('MMM D, YYYY'));
      }

      $('#js-daterangepicker-predefined').daterangepicker({
        startDate: start,
        endDate: end,
        ranges: {
          'Today': [moment(), moment()],
          'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
          'Last 7 Days': [moment().subtract(6, 'days'), moment()],
          'Last 30 Days': [moment().subtract(29, 'days'), moment()],
          'This Month': [moment().startOf('month'), moment().endOf('month')],
          'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
        }
      }, cb);

      cb(start, end);

      // custom js
      $('.btn-remove').on('click', function(){
        $(this).parent().parent().remove();
      });
    });


    // INITIALIZATION OF DATATABLES
    // =======================================================
    HSCore.components.HSDatatables.init($('#datatable'), {
      select: {
        style: 'multi',
        selector: 'td:first-child input[type="checkbox"]',
        classMap: {
          checkAll: '#datatableCheckAll',
          counter: '#datatableCounter',
          counterInfo: '#datatableCounterInfo'
        }
      },
      language: {
        zeroRecords: `<div class="text-center p-4">
              <img class="mb-3" src="./dist/assets/svg/illustrations/oc-error.svg" alt="Image Description" style="width: 10rem;" data-hs-theme-appearance="default">
              <img class="mb-3" src="./dist/assets/svg/illustrations-light/oc-error.svg" alt="Image Description" style="width: 10rem;" data-hs-theme-appearance="dark">
            <p class="mb-0">No data to show</p>
            </div>`
      }
    });

    const datatable = HSCore.components.HSDatatables.getItem(0)

    document.querySelectorAll('.js-datatable-filter').forEach(function (item) {
      item.addEventListener('change',function(e) {
        const elVal = e.target.value,
    targetColumnIndex = e.target.getAttribute('data-target-column-index'),
    targetTable = e.target.getAttribute('data-target-table');

    HSCore.components.HSDatatables.getItem(targetTable).column(targetColumnIndex).search(elVal !== 'null' ? elVal : '').draw()
      })
    })
  </script>

  <!-- JS Plugins Init. -->
  <script>
    (function() {
      localStorage.removeItem('hs_theme')

      window.onload = function () {


        // INITIALIZATION OF NAVBAR VERTICAL ASIDE
        // =======================================================
        new HSSideNav('.js-navbar-vertical-aside').init()


        // INITIALIZATION OF FORM SEARCH
        // =======================================================
        const HSFormSearchInstance = new HSFormSearch('.js-form-search')

        if (HSFormSearchInstance.collection.length) {
          HSFormSearchInstance.getItem(1).on('close', function (el) {
            el.classList.remove('top-0')
          })

          document.querySelector('.js-form-search-mobile-toggle').addEventListener('click', e => {
            let dataOptions = JSON.parse(e.currentTarget.getAttribute('data-hs-form-search-options')),
              $menu = document.querySelector(dataOptions.dropMenuElement)

            $menu.classList.add('top-0')
            $menu.style.left = 0
          })
        }


        // INITIALIZATION OF BOOTSTRAP DROPDOWN
        // =======================================================
        HSBsDropdown.init()


        // INITIALIZATION OF CHARTJS
        // =======================================================
        HSCore.components.HSChartJS.init('.js-chart')


        // INITIALIZATION OF CHARTJS
        // =======================================================
        HSCore.components.HSChartJS.init('#updatingBarChart')
        const updatingBarChart = HSCore.components.HSChartJS.getItem('updatingBarChart')

        // Call when tab is clicked
        document.querySelectorAll('[data-bs-toggle="chart-bar"]').forEach(item => {
          item.addEventListener('click', e => {
            let keyDataset = e.currentTarget.getAttribute('data-datasets')

            const styles = HSCore.components.HSChartJS.getTheme('updatingBarChart', HSThemeAppearance.getAppearance())

            if (keyDataset === 'lastWeek') {
              updatingBarChart.data.labels = ["Apr 22", "Apr 23", "Apr 24", "Apr 25", "Apr 26", "Apr 27", "Apr 28", "Apr 29", "Apr 30", "Apr 31"];
              updatingBarChart.data.datasets = [
                {
                  "data": [120, 250, 300, 200, 300, 290, 350, 100, 125, 320],
                  "backgroundColor": styles.data.datasets[0].backgroundColor,
                  "hoverBackgroundColor": styles.data.datasets[0].hoverBackgroundColor,
                  "borderColor": styles.data.datasets[0].borderColor,
                  "maxBarThickness": 10
                },
                {
                  "data": [250, 130, 322, 144, 129, 300, 260, 120, 260, 245, 110],
                  "backgroundColor": styles.data.datasets[1].backgroundColor,
                  "borderColor": styles.data.datasets[1].borderColor,
                  "maxBarThickness": 10
                }
              ];
              updatingBarChart.update();
            } else {
              updatingBarChart.data.labels = ["May 1", "May 2", "May 3", "May 4", "May 5", "May 6", "May 7", "May 8", "May 9", "May 10"];
              updatingBarChart.data.datasets = [
                {
                  "data": [200, 300, 290, 350, 150, 350, 300, 100, 125, 220],
                  "backgroundColor": styles.data.datasets[0].backgroundColor,
                  "hoverBackgroundColor": styles.data.datasets[0].hoverBackgroundColor,
                  "borderColor": styles.data.datasets[0].borderColor,
                  "maxBarThickness": 10
                },
                {
                  "data": [150, 230, 382, 204, 169, 290, 300, 100, 300, 225, 120],
                  "backgroundColor": styles.data.datasets[1].backgroundColor,
                  "borderColor": styles.data.datasets[1].borderColor,
                  "maxBarThickness": 10
                }
              ]
              updatingBarChart.update();
            }
          })
        })


        // INITIALIZATION OF CHARTJS
        // =======================================================
        HSCore.components.HSChartJS.init('.js-chart-datalabels', {
          plugins: [ChartDataLabels],
          options: {
            plugins: {
              datalabels: {
                anchor: function (context) {
                  var value = context.dataset.data[context.dataIndex];
                  return value.r < 20 ? 'end' : 'center';
                },
                align: function (context) {
                  var value = context.dataset.data[context.dataIndex];
                  return value.r < 20 ? 'end' : 'center';
                },
                color: function (context) {
                  var value = context.dataset.data[context.dataIndex];
                  return value.r < 20 ? context.dataset.backgroundColor : context.dataset.color;
                },
                font: function (context) {
                  var value = context.dataset.data[context.dataIndex],
                    fontSize = 25;

                  if (value.r > 50) {
                    fontSize = 35;
                  }

                  if (value.r > 70) {
                    fontSize = 55;
                  }

                  return {
                    weight: 'lighter',
                    size: fontSize
                  };
                },
                formatter: function (value) {
                  return value.r
                },
                offset: 2,
                padding: 0
              }
            },
          }
        })

        // INITIALIZATION OF SELECT
        // =======================================================
        HSCore.components.HSTomSelect.init('.js-select')


        // INITIALIZATION OF CLIPBOARD
        // =======================================================
        HSCore.components.HSClipboard.init('.js-clipboard')
      }
    })()
  </script>

  <!-- Style Switcher JS -->

  <script>
      (function () {
        // STYLE SWITCHER
        // =======================================================
        const $dropdownBtn = document.getElementById('selectThemeDropdown') // Dropdowon trigger
        const $variants = document.querySelectorAll(`[aria-labelledby="selectThemeDropdown"] [data-icon]`) // All items of the dropdown

        // Function to set active style in the dorpdown menu and set icon for dropdown trigger
        const setActiveStyle = function () {
          $variants.forEach($item => {
            if ($item.getAttribute('data-value') === HSThemeAppearance.getOriginalAppearance()) {
              $dropdownBtn.innerHTML = `<i class="${$item.getAttribute('data-icon')}" />`
              return $item.classList.add('active')
            }

            $item.classList.remove('active')
          })
        }

        // Add a click event to all items of the dropdown to set the style
        $variants.forEach(function ($item) {
          $item.addEventListener('click', function () {
            HSThemeAppearance.setAppearance($item.getAttribute('data-value'))
          })
        })

        // Call the setActiveStyle on load page
        setActiveStyle()

        // Add event listener on change style to call the setActiveStyle function
        window.addEventListener('on-hs-appearance-change', function () {
          setActiveStyle()
        })
      });


    </script>

  <!-- End Style Switcher JS -->
  <%= yield :js %>


<script type="text/javascript">
  $('.radio-with-form').on('change',function(e) {
    $(this).val() == 'yes' ? toShow($(this).data('form'), true) : toShow($(this).data('form'), false)



    if($(this).hasClass('has-textarea') && $(this).hasClass('textarea-no')) {
      var textarea = $(this).data('textarea');
      // alert(textarea);
      ($(this).val() == 'no')  ? $('#'+textarea).removeClass('d-none') : $('#'+textarea).addClass('d-none')
    } 
  });

  $('.btn-toggle').on('click',function(e){
    $(this).hasClass('active') ? $(this).removeClass('active') : $(this).addClass('active');
    if($(this).hasClass('has-to-show')){
      $(this).hasClass('active') ? toShow($(this).data('toshow'),true) : toShow($(this).data('toshow'),false);
    }

    if($(this).hasClass('to-change-value')) {
      var to_change = $(this).data('tochange');
      $(this).hasClass('active') ? $('input[name='+to_change+']').val('yes') : $('input[name='+to_change+']').val('no');

      saveInput($('input[name='+to_change+']'));
    }

    if($(this).hasClass('has-to-hide')){
      $(this).hasClass('active') ? toShow($(this).data('tohide'),false) : toShow($(this).data('tohide'),true);
    }
  });

  function toShow(to_show,show) {
    show ? $('#'+to_show).removeClass('d-none') : $('#'+to_show).addClass('d-none');
  }


</script>

<script>
var csrfToken = $('meta[name="csrf-token"]').attr('content');
$('input:not([type="hidden"]), textarea, select').on('change', function() {
  if(!($(this).hasClass('multi-field')))
	 saveInput($(this));
  else{
      saveInputMultiRecord($(this));
  }
});


//Autosave for custom dropdown
$('.multi-select').on('change', function() {
  var dropdownId = $(this).attr('id');
  if([
      'multi-select-lang-speak', 'multi-select-lang-write', 'state_of_practice',
      'primary-practioner-type', 'languages-you-speak', 'languages-you-write', 'hp_health_plans', 'hp_hospitals', 'hp_directories', 'populations_served'
     ].includes(dropdownId)) {
      saveInput($(this));
  }
});

$('.cb_sched').on('change',function() {
  updateSchedFieldText($(this));
})

function updateSchedFieldText(input) {
    var newText = ''; // Initialize an empty string to store the new text

    var closestParent = input.closest('.d-flex');
    var inputField = closestParent.find('.sched-field');
    var id = input.data('id');
    $('.cb_sched-'+id).each(function() {
      if ($(this).prop('checked')) {
        newText += $(this).val() + ' ';
      }
    });
    inputField.val(newText);
}

$('.single-select').on('change', function() {
  var dropdownId = $(this).attr('id');
  if(['ps-citizenship', 'ps-cob', 'fnin-country-of-issue', 'ps-state', 'gi-visa-types', 'dea_registration_state', 'cds_registration_state', 'registration_issue_state', 'registration_state', 'licensure_state', 'participating_medicare_state', 'participating_medicaid_state', 'other_certification_state', 'specialty', 'usd_school_location', 'prof_school_location', 'tf-location', 'tr_training_types', 'tr_specialties', 'tfu_affiliated_location', 'taf-location', 'military_primary_base_location', 'state_abbr', 'hfa_privilege_status', 'admit_state', 'edc-employment-location', 'state_abbr', 'rf-specialty', 'rf-state', 'cc-state', 'dco_state', 'contact_office_state', 'contact_billing_state', 'contact_remittance_state','practice_midlevel_state', 'practice_partners_state', 'practice_partners_specialty', 'lf-carrier-location', 'gi-country', 'mc-method-resolution'].includes(dropdownId)) {
    saveInput($(this));
  }
});

function saveInputMultiRecord(input) {
  var url = '/provider_sources/autosave_multi_record';
  var model = input.data('model');
  var id = input.data('id')
  var content = input.val();
  var field = input.attr('name');

  if(input.is(':checkbox')){
    field = $('#schedules-'+id).attr('name');
    content = $('#schedules-'+id).val();
    model = $('#schedules-'+id).data('model');
  }

  // alert(content);
  $.ajax({
    url: url,
    method: 'POST',
    dataType: 'json',
    data: { authenticity_token: csrfToken, model: model, id: id, content: content, field: field },
    success: function (data) {
      console.log('Autosaved successfully!');
    },
    error: function() {
      console.log('Autosave failed!');
    }
  })
}

function saveInput(input) {
    var url = '/provider_sources/autosave'; // Replace with the URL for your autosave endpoint
      var fieldName = input.attr('name');
      var value = input.val();
      var fieldType = input.attr('type');

      if(fieldType == 'checkbox'){
        value = input.is(':checked') ? 'yes' : 'no';
      }

      if(input.hasClass('other_name_still_use')) {
        if(input.is(':checked')){
          $('#stopped_date_other_name').val('');
          $("#stopped_date_other_name").attr("readonly", true);
          $("#stopped_date_other_name").css("background", '#eee');

        }
        else {
          $("#stopped_date_other_name").css("background", '#fff');
          $("#stopped_date_other_name").removeAttr("readonly");
        }
      }

      $.ajax({
          url: url,
          method: 'POST',
          dataType: 'json',
          data: { authenticity_token: csrfToken, field_name: fieldName, value: value },
          success: function(data) {
              console.log('Autosaved successfully!');
              getProgress();
          },
          error: function() {
              console.log('Autosave failed!');
          }
      });
}


$('input, textarea, select, div.multi-select, div.single-select').each(function(element) {
	var inputName = $(this).attr('name');
	var inputValue = $(this).val();
  var tagName = $(this).prop('tagName').toLowerCase();
  var inputType = $(this).attr('type');
  var isMultiRecord = $(this).hasClass('multi-field');

  //  add multi-select and single-select to inputType name
  if (
      [
        'state_of_practice', 'primary-practioner-type',
        'ps-citizenship', 'ps-cob', 'fnin-country-of-issue',
        'ps-state','gi-visa-types', 'languages-you-speak', 'languages-you-write', 'dea_registration_state', 'cds_registration_state', 'registration_issue_state', 'registration_state', 'licensure_state', 'participating_medicare_state', 'participating_medicaid_state', 'other_certification_state', 'hp_health_plans', 'hp_hospitals', 'hp_directories', 'specialty', 'usd_school_location', 'prof_school_location', 'tf-location', 'tr_training_types', 'tr_specialties', 'tfu_affiliated_location', 'taf-location', 'military_primary_base_location', 'state_abbr', 'hfa_privilege_status', 'admit_state', 'edc-employment-location', 'state_abbr', 'rf-specialty', 'rf-state', 'cc-state', 'dco_state', 'contact_office_state', 'contact_billing_state', 'contact_remittance_state', 'practice_midlevel_state', 'practice_partners_state', 'practice_partners_specialty', 'lf-carrier-location', 'gi-country',
        'ps-state','gi-visa-types', 'languages-you-speak', 'languages-you-write', 'dea_registration_state', 'cds_registration_state', 'registration_issue_state', 'registration_state', 'licensure_state', 'participating_medicare_state', 'participating_medicaid_state', 'other_certification_state', 'hp_health_plans', 'hp_hospitals', 'hp_directories', 'specialty', 'usd_school_location', 'prof_school_location', 'tf-location', 'tr_training_types', 'tr_specialties', 'tfu_affiliated_location', 'taf-location', 'military_primary_base_location', 'state_abbr', 'hfa_privilege_status', 'admit_state', 'edc-employment-location', 'state_abbr', 'rf-specialty', 'rf-state', 'cc-state', 'dco_state', 'contact_office_state', 'contact_billing_state', 'contact_remittance_state', 'practice_midlevel_state', 'practice_partners_state', 'practice_partners_specialty', 'lf-carrier-location', 'gi-country', 'populations_served', 'state', 'issue_state', 'registration_state', 'mc-method-resolution'
      ].includes(inputName)
    ){
    inputType = 'multi-select' // single-select is included here
  }



	// Make an AJAX request to retrieve the value for the input field
	$.ajax({
			url: '/provider_sources/fetch',
			type: 'GET',
			data: { authenticity_token: csrfToken, field_name: inputName },
			dataType: 'json',
			success: function(data) {
          if (inputType == 'radio' || inputType == 'checkbox') {
            var radioInput = $(tagName + '[name="' + inputName + '"][value="' + data.value + '"]');

            if (data.value == 'yes' || data.value == 'on'){
              if(inputType == 'radio'){
                radioInput.prop("checked", true);
                $('#'+inputName+'-holder').removeClass('d-none')
              }else if(inputType == 'checkbox'){
                $(tagName + '[name="' + inputName + '"]').prop("checked", true);
              }
            }else{
              // console.log(tagName + '[name="' + inputName + '"]')
              if(inputType == 'radio'){
                radioInput.prop("checked", true);
                $('#'+inputName+'-holder').addClass('d-none')
              }else if(inputType == 'checkbox'){
                $(tagName + '[name="' + inputName + '"]').prop("checked", false);
              }
            }

            if (inputName == 'other_name'){
              if (data.value == 'yes'){
                $('#other_name_field').removeClass('d-none');
              }else{
                $('#other_name_field').addClass('d-none');
              }
            }

            if (inputName == 'ssn'){
              if (data.value == 'yes'){
                $('#ssn_field').removeClass('d-none');
              }else{
                $('#ssn_field').addClass('d-none');
              }
            }

             if (inputName == 'dea_full_schedule'){
              if (data.value == 'no'){
                $('#dea_tarea').removeClass('d-none');
              }else{
                $('#dea_tarea').addClass('d-none');
              }
            }

            if(inputName == 'licensure_require_supervision'){
              if (data.value == 'yes'){
                $('#supervised_fields').removeClass('d-none');
              }else{
                $('#supervised_fields').addClass('d-none');
              }
            }

            if (inputName == 'edc_collab'){
              if (data.value == 'yes'){
                $('#collab_form').removeClass('d-none');
              }else{
                $('#collab_form').addClass('d-none');
              }
            }

            if (inputName == 'medicare_field'){
              if (data.value == 'yes'){
                $('#medicare_fields_test').removeClass('d-none');
              }else{
                $('#medicare_fields_test').addClass('d-none');
              }
            }

            if (inputName == 'medicaid_field'){
              if (data.value == 'yes'){
                $('#medicaid_fields').removeClass('d-none');
              }else{
                $('#medicaid_fields').addClass('d-none');
              }
            }

            if (inputName == 'caqh_field'){
              if (data.value == 'yes'){
                $('#caqh_fields').removeClass('d-none');
              }else{
                $('#caqh_fields').addClass('d-none');
              }
            }

            if (inputName == 'other_cert_field'){
              if (data.value == 'yes'){
                $('#other_cert_fields').removeClass('d-none');
              }else{
                $('#other_cert_fields').addClass('d-none');
              }
            }


            if (inputName == 'honorably_discharge'){
              if (data.value == 'no'){
                $('#is-discharged-field').removeClass('d-none');
              }else{
                $('#is-discharged-field').addClass('d-none');
              }
            }

            if (inputName == 'military_court_martialed'){
              if (data.value == 'yes'){
                $('#court-martialed-field').removeClass('d-none');
              }else{
                $('#court-martialed-field').addClass('d-none');
              }
            }

            if (inputName == 'military_reserve'){
              if (data.value == 'yes'){
                $('#military-reserve-field').removeClass('d-none');
              }else{
                $('#military-reserve-field').addClass('d-none');
              }
            }

            if (inputName == 'is_self_insured'){
             if (value === 'yes') {
                  document.getElementById('insured_form_fields').classList.remove('d-none');
                  document.getElementById('not_insured_form_fields').classList.add('d-none');
              } else if (value === 'no') {
                  document.getElementById('insured_form_fields').classList.add('d-none');
                  document.getElementById('not_insured_form_fields').classList.remove('d-none');
              }
            }



            if (inputName == 'practice_patient_age_not_applicable') {
              if ($('#age_not_applicable').is(':checked')) {
                $('.age-restrict').prop('disabled', true);
                  $('.age-restrict').val('');
              } else {
                $('.age-restrict').removeAttr('disabled');
              }
            }

            if (inputName == 'dea_not_expire') {
              if ($('#dea-not-expire').is(':checked')) {
                $('.dea-expire').prop('disabled', true);
                  $('.dea-expire').val('');
              } else {
                $('.dea-expire').removeAttr('disabled');
              }
            }

            if (inputName == 'cds_not_expire') {
              if ($('#cds-not-expire').is(':checked')) {
                $('.cds-expire').prop('disabled', true);
                  $('.cds-expire').val('');
              } else {
                $('.cds-expire').removeAttr('disabled');
              }
            }

            if (inputName == 'ps_registration_not_expire') {
              if ($('#ps-registration-not-expire').is(':checked')) {
                $('.ps-registration-expire').prop('disabled', true);
                  $('.ps-registration-expire').val('');
              } else {
                $('.ps-registration-expire').removeAttr('disabled');
              }
            }

            if (inputName == 'licensure_not_expire') {
              if ($('#licensure-not-expire').is(':checked')) {
                $('.licensure-expire').prop('disabled', true);
                  $('.licensure-expire').val('');
              } else {
                $('.licensure-expire').removeAttr('disabled');
              }
            }

            if (inputName == 'participating_medicaid_no_number') {
              if ($('#participating-medicaid-no-number').is(':checked')) {
                $('.medicaid-number').prop('disabled', true);
                  $('.medicaid-number').val('');
              } else {
                $('.medicaid-number').removeAttr('disabled');
              }
            }

            if (inputName == 'other_certification_not_expire') {
              if ($('#other-certification-not-expire').is(':checked')) {
                $('.other-cert-expire').prop('disabled', true);
                  $('.other-cert-expire').val('');
              } else {
                $('.other-cert-expire').removeAttr('disabled');
              }
            }

          } else if(tagName == 'select'){
            displayFieldsFromSelectElement(data, inputName, tagName);
          }  else if(inputType == 'hidden'){
            displayFieldsFromHiddenElement(data, inputName, tagName);
          } else if(inputType == 'multi-select'){
            displayFieldsFromMultiSelectElement(data, inputName, tagName);
          } else  {
            try {
              if (typeof inputName === 'undefined') {
                console.error('inputName is not defined', inputName, tagName, inputType, data);
              } else {
                if(isMultiRecord === false)
                  displayFieldsFromInputElement(data, inputName, tagName, inputType);
              }
            } catch (error) {
              // Handle the error here
              console.log(inputName, tagName, inputType);
              console.error("An error occurred:", error);
            }
          }
			}
	  });
});

function displayFieldsFromSelectElement(data, inputName, tagName) {
  if (['state_of_practice', 'health_plans', 'hospitals', 'directories', 'languages-you-speak', 'languages-you-write'].includes(inputName)) {
    // InputName is in the list, so the values are expected to be an array
    var values = eval(data.value);
    for (let index = 0; index < values.length; index++) {
      const element = values[index];
      $(tagName + '[name="' + inputName + '"] option[value="' + element + '"]').prop('selected', true);
    }
  } else {
    // InputName is NOT in the list, so a single select dropdown is expected
    $(tagName + '[name="' + inputName + '"]').val(data.value);
  }

  // Manually trigger the change event for the single select dropdown
  $(tagName + '[name="' + inputName + '"]').trigger('change.select2');
}

function displayFieldsFromMultiSelectElement(data, inputName, tagName){
  // convert data.value string with comma separated to array
  // sample: 'Arizona,Alaska,Alabama'
  var splitted_values = [];

  if(data.value !== null){
    splitted_values = data.value.split(',');
  }
  // add more div element that is using multi-select
  var multi_select_name = '.multi-select-' + inputName;
  var path = ''
  var multiselect = true;

  if(['state_of_practice', 'ps-state', 'dea_registration_state', 'cds_registration_state', 'registration_issue_state', 'registration_state', 'licensure_state', 'participating_medicare_state', 'participating_medicaid_state', 'other_certification_state', 'usd_school_location', 'prof_school_location', 'tf-location', 'tfu_affiliated_location', 'taf-location', 'military_primary_base_location', 'state_abbr', 'admit_state', 'edc-employment-location', 'state_abbr', 'rf-state', 'cc-state', 'dco_state', 'contact_office_state', 'contact_billing_state', 'contact_remittance_state', 'practice_midlevel_state', 'practice_partners_state', 'lf-carrier-location', 'state', 'issue_state', 'registration_state'].includes(inputName)){
    path = '<%= states_multi_select_data_path %>';
    if(['ps-state', 'dea_registration_state', 'cds_registration_state', 'registration_issue_state', 'registration_state', 'licensure_state', 'participating_medicare_state', 'participating_medicaid_state', 'other_certification_state', 'usd_school_location', 'prof_school_location', 'tf-location', 'tfu_affiliated_location', 'taf-location', 'military_primary_base_location', 'state_abbr', 'admit_state', 'edc-employment-location', 'state_abbr', 'rf-state', 'cc-state', 'dco_state', 'contact_office_state', 'contact_billing_state', 'contact_remittance_state', 'practice_midlevel_state', 'practice_partners_state', 'lf-carrier-location', 'state', 'issue_state', 'registration_state'].includes(inputName)){ // single select
      multiselect = false
    }
  }else if(inputName == 'primary-practioner-type'){
    path = '<%= provider_types_multi_select_data_path %>';
  } else if(['gi-country','ps-citizenship', 'ps-cob', 'fnin-country-of-issue'].includes(inputName)){
    // if single select, use this path
    path = '<%= countries_multi_select_data_path %>';
    multiselect = false
  } else if(['gi-visa-types'].includes(inputName)){
    path = '<%= visa_types_multi_select_data_path %>';
    multiselect = false
  } else if(['languages-you-speak', 'languages-you-write'].includes(inputName)){
    path = '<%= languages_multi_select_data_path %>';
  } else if(['hp_health_plans', 'hp_health_plans'].includes(inputName)){
    path = '<%= health_plans_multi_select_data_path %>';
  } else if(['hp_hospitals', 'hp_hospitals'].includes(inputName)){
    path = '<%= hospitals_multi_select_data_path %>';
   } else if(['populations_served', 'population_serviced'].includes(inputName)){
    path = '<%= serviced_populations_multi_select_data_path %>';  
  } else if(['hp_directories', 'hp_directories'].includes(inputName)){
    path = '<%= directories_multi_select_data_path %>';
    multiselect = false
  } else if(['specialty', 'specialty', 'tr_specialties', 'rf-specialty', 'practice_partners_specialty'].includes(inputName)){
    path = '<%= specialties_multi_select_data_path %>';
    multiselect = false
  } else if(['tr_training_types', 'tr_training_types'].includes(inputName)){
    path = '<%= training_types_multi_select_data_path %>';
    multiselect = false
  } else if(['hfa_privilege_status', 'hfa_privilege_status'].includes(inputName)){
    path = '<%= privilege_statuses_multi_select_data_path %>';
    multiselect = false
  } else if(['mc-method-resolution', 'mc-method-resolution'].includes(inputName)){
    path = '<%= method_resolutions_multi_select_data_path %>';
    multiselect = false
  }
  

  // add more else if here for multi-select

  if (path != ''){
    $.get(path, function (data) { initMultiSelect(data['result'], splitted_values, multi_select_name, multiselect); });
  }
}

function displayFieldsFromInputElement(data, inputName, tagName, inputType){
  $(tagName + '[name="' + inputName + '"]').val(data.value);
}

function displayFieldsFromHiddenElement(data, inputName, tagName){
  if(data.value == 'yes'){
    var element = $('[data-tochange="'+inputName+'"]');
    var to_show_id = $(element).data('toshow');

    $(element).addClass('active')
    $('#' + to_show_id).removeClass('d-none');
  }else{
    var element = $('[data-tochange="'+inputName+'"]');
    var to_show_id = $(element).data('toshow');
    $('#' + to_show_id).addClass('d-none');
  }
}

function displayFieldsFromCheckboxElement(data, inputName, tagName){
 // put the refactor here for checkbox
}

function displayFieldsFromSelectRadioElement(data, inputName, tagName){
 // put the refactor here for radio
}

function initMultiSelect(collection, selected_values, element = '.multi-select', multiselect = true){
  VirtualSelect.init({
    options: collection,
    ele: element,
    multiple: multiselect,
    search: true,
    selectedValue: selected_values
  });
}

// some text input where they can type and it will be added to a readonly text input
 $('.add-text-readonly').on('click',function(){
    var take_id = $(this).data('takefrom')
    var text = $('#'+take_id).val();
    var putin_id = $(this).data('putin')

    var status = $('#'+putin_id).val();

    if(status != "")
    {
      status = status + "," + text;
    }
    else {
      status = text;
    }

    $('#'+putin_id).val(status);

    saveInput($('#'+putin_id))
  });

   $('.remove-text-from-readonly').on('click',function(){
    var putin_id = $(this).data('removefrom')
    var status = $('#'+putin_id).val();
    var arr = status.split(',');

    if(arr.length) {
      status = "";
      for (var i = 0; i < (arr.length - 1); i++) {
        if(i != 0)
          status = status + "," + arr[i];
        else
          status = arr[i]
      }
    }
    $('#'+putin_id).val(status);

    saveInput($('#'+putin_id))
  });

   $('.radio-toshow').on('change',function() {
      var to_show = $(this).data('toshow');
      ($(this).val() == 'yes') ? $('#'+to_show).removeClass('d-none') : $('#'+to_show).addClass('d-none') ;
   });


$(document).on('ready',function() {
  $('.multi-record-multi-select').change(function() {
    var value = this.value;
    if(value != "")
      saveInputMultiRecord($(this))
  });

  $('.full-sched-radio').on('change', function(){
    var sched_id = $(this).data('id');
    ($(this).val() == 'no') ? $('#record_tarea-'+sched_id).removeClass('d-none') : $('#record_tarea-'+sched_id).addClass('d-none');
  })
})
var page_group = '';
$(document).on('ready',getProgress());
  function getProgress() {
   page_group = '<%= page_data_group action_name, params[:page]%>';
    var url = '/provider_sources/get_progress'; // Replace with the URL for your
    $.ajax({
      url: url,
      method: 'POST',
      dataType: 'json',
      data: {authenticity_token: csrfToken, data_group: page_group},
      success: function(data) {
        var progress = data['progress'];
        $('#'+page_group).css('width',(progress.toString()+'%'))
        $('#'+page_group+'_text').html(progress.toString() + '%');
      },
      error: function() {
          console.log('Failed to fetch progress');

      }
    });
  }

</script>
</body>
</html>


<style>
  .multi-select {
    padding: 0;
  }
	.single-select {
    width: 100%;
    max-width: 1000px;
    padding: 0;
  }
</style>