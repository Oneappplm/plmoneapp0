<div class="content container-fluid">
  <div class="row mb-4">
    <div class="col-lg-12 d-flex justify-content-end gap-2">
      <% if current_user.can_access?('Users') %>
        <a href="<%= users_path %>" class="btn btn-md border-0 px-5 <%= enrollment_nav_active('users') %>">Users</a>
      <% end %>
      <% if current_user.can_access?('Role Access') %>
        <a href="javascript:void(0);" class="btn btn-md border-0 <%= enrollment_nav_active('role_based_accesses') %>">Role Access</a>
      <% end %>
    </div>
  </div>
</div>

<%= render 'user_restriction', locals: { access_key: 'Role Access' } do %>
  <div class="container-fluid">
    <div class="row mb-3">
      <div class="col-lg-12">
        <h2>Role-Based Access</h2>
      </div>
    </div>

		<% if @role_based %>
      <div class="row mb-3">
        <div class="col-12 col-md-7">
          <%= form_with url: role_based_accesses_path, method: :get, local: true, html: { class: 'd-flex gap-2' } do |form| %>
            <%= form.hidden_field :role_based, value: @role_based %>
            <%= form.text_field :query, value: params[:query], class: 'form-control', placeholder: 'Search Item...' %>
            <button class="btn btn-secondary">
              <i class="bi bi-search"></i>
            </button>
          <% end %>
        </div>
      </div>

      <div class="row">
        <div class="col-12 col-md-7">
          <%= form_with url: update_permissions_role_based_accesses_path, method: :post, local: true do %>
            <input type="hidden" name="role_based" value="<%= @role_based %>">

            <table class="table table-bordered text-center">
              <thead class="table-primary">
                <tr>
                  <th class="bg-primary text-white">Configuration Item</th>
                  <th class="bg-primary text-white">Full Access</th>
                  <th class="bg-primary text-white">Read</th>
                  <th class="bg-primary text-white">Write</th>
                  <th class="bg-primary text-white">Create</th>
                  <th class="bg-primary text-white">Delete</th>
                </tr>
              </thead>
              <tbody>
                <% @permissions.each do |page, accesses| %>
                  <tr>
                    <td class="fw-bold"><%= page.titleize %></td>
                    <% accesses.each do |access| %>
                      <td>
                        <%= check_box_tag "permissions[#{access.id}][full_access]", "1",
                            (access.can_read && access.can_update && access.can_create && access.can_delete),
                            class: "full-access", data: { target_id: access.id } %>
                      </td>
                      <td>
                        <%= check_box_tag "permissions[#{access.id}][read]", "1", access.can_read, class: "permission-#{access.id} permission-checkbox" %>
                      </td>
                      <td>
                        <%= check_box_tag "permissions[#{access.id}][write]", "1", access.can_update, class: "permission-#{access.id} permission-checkbox" %>
                      </td>
                      <td>
                        <%= check_box_tag "permissions[#{access.id}][create]", "1", access.can_create, class: "permission-#{access.id} permission-checkbox" %>
                      </td>
                      <td>
                        <%= check_box_tag "permissions[#{access.id}][delete]", "1", access.can_delete, class: "permission-#{access.id} permission-checkbox" %>
                      </td>
                    <% end %>
                  </tr>
                <% end %>
              </tbody>
            </table>

            <button type="submit" class="btn btn-primary mt-3">Save Changes</button>
          <% end %>
        </div>
      </div>
    <% end %>
  <% end %>

<% content_for :js do %>
  <script>
    $(document).ready(function() {
      // When "Full Access" is changed, toggle all related permissions
      $(".full-access").on("change", function() {
        let targetId = $(this).data("target-id");
        let isChecked = $(this).prop("checked");

        $(".permission-" + targetId).prop("checked", isChecked).trigger("change");
      });

      // When any individual permission changes, update "Full Access"
      $(".permission-checkbox").on("change", function() {
        let targetId = $(this).closest("tr").find(".full-access").data("target-id");

        // Get all related permission checkboxes
        let permissionCheckboxes = $(".permission-" + targetId);
        let allChecked = permissionCheckboxes.length === permissionCheckboxes.filter(":checked").length;

        // If all permissions are checked, check "Full Access", otherwise uncheck it
        $(".full-access[data-target-id='" + targetId + "']").prop("checked", allChecked);
      });

      // Ensure "Full Access" updates correctly when form is submitted
      $("form").on("submit", function() {
        $(".full-access").each(function() {
          if (!$(this).prop("checked")) {
            // Add a hidden input to explicitly send unchecked value
            $(this).after(`<input type="hidden" name="${$(this).attr("name")}" value="0">`);
          }
        });
      });

      // Delete Role Button Logic
      $('#delete-role').on('click', function(){
        if (!confirm('Are you sure you want to delete this role?')) {
          return false;
        }

        var role_id = $('#role_based').val();
        var delete_url = "<%= delete_role_role_based_accesses_path %>";

        $.ajax({
          url: delete_url,
          type: 'post',
          data: { authenticity_token: $('meta[name="csrf-token"]').attr('content'), role: role_id },
          success: function(data) {
            window.location.href = "/role-based-access";
          },
          error: function(response) {
            alert(response.responseText);
          }
        });
      });
    });

  </script>
<% end %>
