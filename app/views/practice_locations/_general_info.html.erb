<div class="form-row row">
    <div class="col-xl-6">
      <label for=""><span class="text-danger">*</span> Location</label>
      <%= f.text_field :location,
            class: 'form-control',
            placeholder: 'Type here...',
            required: true,
            autocomplete: 'off',
            id: 'location-input',
            onkeypress: 'return isLocationKey(event)',
            oninput: 'validateLocation()' %>
      <small id="location-error" class="text-danger d-none">
        Location can only contain letters, spaces, periods (.), apostrophes (’), and hyphens (-)
      </small>
    </div>
    <div class="col-xl-6">
      <label for="">Legal Name</label>
      <%= f.text_field :legal_name,
            class: 'form-control',
            placeholder: 'Type here...',
            id: 'legal-name-input',
            onkeypress: 'return isLegalNameKey(event)',
            oninput: 'validateLegalName()' %>
      <small id="legal-name-error" class="text-danger d-none">
        Legal Name can only contain letters, spaces, periods (.), apostrophes (’), and hyphens (-)
      </small>
    </div>
</div>
<div class="form-row row">
   <div class="col-xl-6">
      <label for=""><span class="text-danger required">*</span> Address 1</label>
      <%= f.text_field :address1, class: 'form-control', placeholder: 'Type here...', required: true, autocomplete: 'off' %>
   </div>
   <div class="col-xl-6">
      <label for="">Address 2</label>
      <%= f.text_field :address2, class: 'form-control', placeholder: 'Type here...', autocomplete: 'off' %>
   </div>
</div>
<div class="form-row row">
    <div class="col-xl-6">
      <label for=""><span class="text-danger">*</span> City</label>
      <%= f.text_field :city,
            class: 'form-control',
            placeholder: 'Type here...',
            required: true,
            autocomplete: 'off',
            id: 'city-input',
            onkeypress: 'return isCityKey(event)',
            oninput: 'validateCity()' %>
      <small id="city-error" class="text-danger d-none">City name must contain only letters and spaces</small>
    </div>
   <div class="col-xl-6">
      <label for=""><span class="text-danger">*</span> State</label>
      <%= f.select :state_id, State.all.pluck(:name, :id), { prompt: "Select a State" }, { class: "form-select", required: true } %>
  </div>
</div>
<div class="form-row row">
    <div class="col-xl-6">
      <label for=""><span class="text-danger">*</span> ZIP Code</label>
      <%= f.text_field :zip_code,
            class: 'form-control',
            placeholder: 'Type here...',
            required: true,
            pattern: '\d{5}',
            maxlength: 5,
            title: 'Enter a 5-digit numeric value',
            autocomplete: 'off',
            id: 'zip-code-input',
            onkeypress: 'return isZipKey(event)',
            oninput: 'validateZipCode()' %>
      <small id="zip-code-error" class="text-danger d-none">ZIP Code must be exactly 5 digits</small>
    </div>
    <div class="col-xl-6">
      <label for=""><span class="text-danger">*</span> Phone Number</label>
      <%= f.text_field :phone_number,
            class: 'form-control',
            placeholder: 'Type here...',
            required: true,
            pattern: '^\+?\d{10,15}$',
            maxlength: 15,
            title: "Enter a valid phone number (10–15 digits, optional '+')",
            autocomplete: 'off',
            id: 'phone-number-input',
            onkeypress: 'return isPhoneKey(event)',
            oninput: 'validatePhoneNumber()' %>
      <small id="phone-number-error" class="text-danger d-none">Phone number must be 10–15 digits (optional '+' at the beginning)</small>
    </div>
</div>
<div class="form-row row">
    <div class="col-xl-6">
      <label for="">Fax Number</label>
      <%= f.text_field :fax_number,
            class: 'form-control',
            placeholder: 'Type here...',
            autocomplete: 'off',
            maxlength: 10,
            id: 'fax-number-input',
            oninput: 'validateFaxNumber()',
            onkeypress: 'return isNumberKey(event)' %>
      <small id="fax-number-error" class="text-danger d-none">Fax number must contain digits only (max 10)</small>
    </div>
   <div class="col-xl-6">
      <label for=""><span class="text-danger">*</span> Email</label>
      <%= f.text_field :email, class: 'form-control', placeholder: 'Type here...', required: true,  autocomplete: 'off', pattern: '\A[^@\s]+@[^@\s]+\z', message: "must be a valid email format" %>
   </div>
</div>
<div class="form-row row">
   <div class="col-xl-6">
      <label for=""><span class="text-danger">*</span> Group Tax ID Number</label>
      <%= f.text_field :group_tax_number, class: 'form-control taxid-input', placeholder: 'Type here...', required: true , maxlength: '10', pattern: "[0-9]{2}-[0-9]{7}", title: 'Enter Group Tax ID' %>
   </div>
    <div class="col-xl-6">
      <label for="">Group NPI Number</label>
      <%= f.text_field :group_npi_number,
            class: 'form-control',
            placeholder: 'Type here...',
            maxlength: 10,
            autocomplete: 'off',
            id: 'group-npi-number-input',
            oninput: 'validateGroupNpiNumber()' %>
      <small id="group-npi-error" class="text-danger d-none">Group NPI must contain digits only (max 10)</small>
    </div>
</div>
<div class="form-row row">
   <div class="col-xl-6 d-flex align-items-center">
      <div class="form-check">
         <%= f.check_box :have_group_tax_number, class: 'form-check-input' %>
         <label class="form-check-label" for="grp-tax-check">
			I don't have a Group TaxID
         </label>
      </div>
   </div>
   <div class="col-xl-6">
      <label for="">Group NPI Number Effective Date</label>
      <%= f.date_field :group_npi_number_effective_date, class: 'form-control', placeholder: 'Type here...' %>
   </div>
</div>
<div class="form-row row">
   <div class="col-xl-6">
      <label for="">Enter languages that your staffs speaks</label>
      <%= HtmlUtils.multi_select_dropdown name: "practice_location[languages_speak]", id: 'practice_location_languages_speak', classes: 'multi-languages spoken'%>
   </div>
   <div class="col-xl-6">
      <label for="">Enter languages that your staffs writes</label>
      <%= HtmlUtils.multi_select_dropdown name: "practice_location[languages_write]", id: 'practice_location_languages_write', classes: 'multi-languages written'%>
   </div>
</div>
<div class="form-row row">
   <div class="col-xl-6">
      <label for="">Are interpreters available at this location?</label>
      <div class="d-flex align-items-center gap-3">
         <div class="form-check">
            <%= f.radio_button :interpreters_available, 'yes', class: 'form-check-input', id: 'inter-yes'%>
            <label class="form-check-label" for="inter-yes">
            Yes
            </label>
         </div>
         <div class="form-check">
            <%= f.radio_button :interpreters_available, 'no', class: 'form-check-input', id: 'inter-no'%>
            <label class="form-check-label" for="inter-no">
            No
            </label>
         </div>
      </div>
   </div>
</div>

<%= render "providers/js_components/string_array_modifier"%>

<script>
   $(document).ready(function() {
      var csrfToken = $('meta[name="csrf-token"]').attr('content');
      var taxidInput = document.querySelector('.taxid-input');
      var languages_dropdown = '.multi-languages';
      var practice_location_languages_spoken= stringArrayModifier('<%= @practice_location.languages_speak&.split(",") %>');
      var practice_location_languages_written= stringArrayModifier('<%= @practice_location.languages_write&.split(",") %>');
      var practice_location_state_id = $('#practice_location_state_id').val();

      taxidInput.addEventListener('input', function (e) {
         // Remove non-numeric and non-dash characters
         const cleanedValue = e.target.value.replace(/[^0-9-]/g, '');

         // Limit the length to 10 characters
         const formattedValue = cleanedValue.slice(0, 10);

         // Apply the desired format (##-#######)
         if (formattedValue.length >= 2 && formattedValue.charAt(2) !== '-') {
            taxidInput.value = formattedValue.slice(0, 2) + '-' + formattedValue.slice(2);
         } else {
            taxidInput.value = formattedValue;
         }
      });

      function getLanguages(selected_values, field) {
        $.ajax({
          url: '<%= get_languages_path %>',
          method: 'GET',
          data: { authenticity_token: csrfToken },
        success: function(data) {
          VirtualSelect.init({
            options: data['languages'],
            ele: field,
            multiple: true,
            showSelectedOptionsFirst: true,
            selectedValue: selected_values
          });
        }
        })
      }

      function getStates() {
         $.ajax({
         url: '<%= get_states_with_id_path %>',
         method: 'GET',
         data: { authenticity_token: csrfToken },
         success: function(data) {
            VirtualSelect.init({
            options: data['states'],
            ele: '#dropdown-practice-location-states',
            showSelectedOptionsFirst: true,
            selectedValue: practice_location_state_id
            });
         }
         })
      }
      setTimeout(getLanguages(practice_location_languages_spoken, '.multi-languages.spoken'),3000);
      setTimeout(getLanguages(practice_location_languages_written, '.multi-languages.written'),3000);
      setTimeout(getStates(),3000);
   })
    function validateGroupNpiNumber() {
      const input = document.getElementById("group-npi-number-input");
      const error = document.getElementById("group-npi-error");

      const cleaned = input.value.replace(/\D/g, ''); // remove all non-digits
      if (input.value !== cleaned) {
        input.value = cleaned;
        error.classList.remove("d-none");
      } else {
        error.classList.add("d-none");
      }
    }
    function isNumberKey(evt) {
      const charCode = evt.which ? evt.which : evt.keyCode;
      const error = document.getElementById("fax-number-error");

      // If not digit (0–9)
      if (charCode < 48 || charCode > 57) {
        error.classList.remove("d-none");  // Show error
        return false;
      }

      error.classList.add("d-none");  // Hide error if digit
      return true;
    }

    function validateFaxNumber() {
      const input = document.getElementById("fax-number-input");
      const error = document.getElementById("fax-number-error");

      const cleaned = input.value.replace(/\D/g, ''); // Remove non-digits

      if (input.value !== cleaned || cleaned.length > 10) {
        input.value = cleaned.slice(0, 10); // Trim to 10 digits
        error.classList.remove("d-none");   // Show error
      } else {
        error.classList.add("d-none");      // Hide error
      }
    }
    function isPhoneKey(evt) {
      const charCode = evt.which ? evt.which : evt.keyCode;
      const input = document.getElementById("phone-number-input");
      const error = document.getElementById("phone-number-error");

      const currentValue = input.value;

      // Allow '+' only as the first character
      if (charCode === 43) { // '+'
        if (currentValue.length === 0) {
          error.classList.add("d-none");
          return true;
        } else {
          error.classList.remove("d-none");
          return false;
        }
      }

      // Allow digits (0–9)
      if (charCode >= 48 && charCode <= 57) {
        error.classList.add("d-none");
        return true;
      }

      // Otherwise: show error and block input
      error.classList.remove("d-none");
      return false;
    }

    function validatePhoneNumber() {
      const input = document.getElementById("phone-number-input");
      const error = document.getElementById("phone-number-error");

      let value = input.value;

      // Allow only digits and one '+' at beginning
      if (value.startsWith('+')) {
        value = '+' + value.slice(1).replace(/\D/g, '');
      } else {
        value = value.replace(/\D/g, '');
      }

      // Trim to max 15 characters
      if (value.length > 15) {
        value = value.slice(0, 15);
      }

      input.value = value;

      // Show error if format is invalid
      const validPattern = /^\+?\d{10,15}$/;
      if (!validPattern.test(value)) {
        error.classList.remove("d-none");
      } else {
        error.classList.add("d-none");
      }
    }
    function isZipKey(evt) {
      const charCode = evt.which ? evt.which : evt.keyCode;
      const error = document.getElementById("zip-code-error");

      // Allow only digits
      if (charCode >= 48 && charCode <= 57) {
        error.classList.add("d-none");
        return true;
      }

      // Block non-digit and show error
      error.classList.remove("d-none");
      return false;
    }

    function validateZipCode() {
      const input = document.getElementById("zip-code-input");
      const error = document.getElementById("zip-code-error");

      // Remove non-digits and limit to 5 characters
      const cleaned = input.value.replace(/\D/g, '').slice(0, 5);
      input.value = cleaned;

      // Show error if not exactly 5 digits
      if (cleaned.length !== 5) {
        error.classList.remove("d-none");
      } else {
        error.classList.add("d-none");
      }
    }
    function isCityKey(evt) {
      const charCode = evt.which ? evt.which : evt.keyCode;
      const error = document.getElementById("city-error");

      // Allow letters (A–Z, a–z), space, and basic control keys
      if (
        (charCode >= 65 && charCode <= 90) || // A–Z
        (charCode >= 97 && charCode <= 122) || // a–z
        charCode === 32 // space
      ) {
        error.classList.add("d-none");
        return true;
      }

      // Block everything else
      error.classList.remove("d-none");
      return false;
    }

    function validateCity() {
      const input = document.getElementById("city-input");
      const error = document.getElementById("city-error");

      // Keep only letters and spaces
      const cleaned = input.value.replace(/[^a-zA-Z\s]/g, '');
      input.value = cleaned;

      // Show error if invalid input remains (e.g., completely cleared)
      if (cleaned.length === 0 || /[^a-zA-Z\s]/.test(input.value)) {
        error.classList.remove("d-none");
      } else {
        error.classList.add("d-none");
      }
    }
    function isLegalNameKey(evt) {
      const charCode = evt.which ? evt.which : evt.keyCode;
      const error = document.getElementById("legal-name-error");

      // Allow letters, space, period (.), apostrophe (’), hyphen (-)
      if (
        (charCode >= 65 && charCode <= 90) || // A-Z
        (charCode >= 97 && charCode <= 122) || // a-z
        charCode === 32 || // space
        charCode === 46 || // .
        charCode === 39 || // '
        charCode === 45    // -
      ) {
        error.classList.add("d-none");
        return true;
      }

      error.classList.remove("d-none");
      return false;
    }

    function validateLegalName() {
      const input = document.getElementById("legal-name-input");
      const error = document.getElementById("legal-name-error");

      // Allow only valid characters
      const cleaned = input.value.replace(/[^a-zA-Z\s.\'\-]/g, '');
      input.value = cleaned;

      // Show error if input had invalid chars
      if (input.value !== cleaned || cleaned.trim() === '') {
        error.classList.remove("d-none");
      } else {
        error.classList.add("d-none");
      }
    }
    function isLocationKey(evt) {
      const charCode = evt.which ? evt.which : evt.keyCode;
      const error = document.getElementById("location-error");

      if (
        (charCode >= 65 && charCode <= 90) || // A-Z
        (charCode >= 97 && charCode <= 122) || // a-z
        charCode === 32 || // space
        charCode === 46 || // .
        charCode === 39 || // '
        charCode === 45    // -
      ) {
        error.classList.add("d-none");
        return true;
      }

      error.classList.remove("d-none");
      return false;
    }

    function validateLocation() {
      const input = document.getElementById("location-input");
      const error = document.getElementById("location-error");

      const cleaned = input.value.replace(/[^a-zA-Z\s.\'\-]/g, '');
      input.value = cleaned;

      if (input.value !== cleaned || cleaned.trim() === '') {
        error.classList.remove("d-none");
      } else {
        error.classList.add("d-none");
      }
    }
</script>
